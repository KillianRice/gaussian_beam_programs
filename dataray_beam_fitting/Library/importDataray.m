function raw_data = importDataray(abs_filename)
%% Import data from text file.
% Script for importing data from the dataray
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/10/11 18:41:41

%% Initialize variables.
delimiter = ',';
startRow = 5;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(abs_filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Create output variable
raw_data = table;
raw_data.Sample = cell2mat(raw(:, 1));
raw_data.TimeInSeconds = cell2mat(raw(:, 2));
raw_data.Wua = cell2mat(raw(:, 3));
raw_data.Wub = cell2mat(raw(:, 4));
raw_data.GFit = cell2mat(raw(:, 5));
raw_data.Wva = cell2mat(raw(:, 6));
raw_data.Wvb = cell2mat(raw(:, 7));
raw_data.GFit1 = cell2mat(raw(:, 8));
raw_data.Eff_2W = cell2mat(raw(:, 9));
raw_data.Xc = cell2mat(raw(:, 10));
raw_data.Yc = cell2mat(raw(:, 11));
raw_data.Ellip = cell2mat(raw(:, 12));
raw_data.RelPower = cell2mat(raw(:, 13));
raw_data.Orient = cell2mat(raw(:, 14));
raw_data.Major = cell2mat(raw(:, 15));
raw_data.Minor = cell2mat(raw(:, 16));
raw_data.Mean = cell2mat(raw(:, 17));
raw_data.ADCPeak = cell2mat(raw(:, 18));
raw_data.G_2W = cell2mat(raw(:, 19));
raw_data.G_2W1 = cell2mat(raw(:, 20));
raw_data.PlateauUniformity = cell2mat(raw(:, 21));
raw_data.SetClipLevel1 = cell2mat(raw(:, 22));
raw_data.SetClipLevel2 = cell2mat(raw(:, 23));
raw_data.StatusButton = cell2mat(raw(:, 24));
raw_data.ZeroButton = cell2mat(raw(:, 25));
raw_data.SpacerButton1 = cell2mat(raw(:, 26));
raw_data.SpacerButton2 = cell2mat(raw(:, 27));
raw_data.ZoomButton = cell2mat(raw(:, 28));
raw_data.Cross = cell2mat(raw(:, 29));
raw_data.Rc = cell2mat(raw(:, 30));
raw_data.AdcPeak = cell2mat(raw(:, 31));
raw_data.RelativePower = cell2mat(raw(:, 32));